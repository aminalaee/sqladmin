{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#sqlalchemy-admin-for-starlettefastapi","title":"SQLAlchemy Admin for Starlette/FastAPI","text":"<p>SQLAdmin is a flexible Admin interface for SQLAlchemy models.</p> <p>Main features include:</p> <ul> <li>SQLAlchemy sync/async engines</li> <li>Starlette integration</li> <li>FastAPI integration</li> <li>WTForms form building</li> <li>SQLModel support</li> <li>UI using Tabler</li> </ul> <p>Documentation: https://aminalaee.github.io/sqladmin</p> <p>Source Code: https://github.com/aminalaee/sqladmin</p> <p>Online Demo: Demo</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install sqladmin\n$ pip install sqladmin[full]\n</code></pre>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#quickstart","title":"Quickstart","text":"<p>Let's define an example SQLAlchemy model:</p> <pre><code>from sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.orm import declarative_base\n\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n\nBase.metadata.create_all(engine)  # Create tables\n</code></pre> <p>If you want to use <code>SQLAdmin</code> with <code>FastAPI</code>:</p> <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\n\n\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>Or if you want to use <code>SQLAdmin</code> with <code>Starlette</code>:</p> <pre><code>from sqladmin import Admin, ModelView\nfrom starlette.applications import Starlette\n\n\napp = Starlette()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>Now visiting <code>/admin</code> on your browser you can see the <code>SQLAdmin</code> interface.</p>"},{"location":"#related-projects-and-inspirations","title":"Related projects and inspirations","text":"<ul> <li>Flask-Admin Admin interface for Flask supporting different database backends and ORMs. This project has inspired SQLAdmin extensively and most of the features and configurations are implemented the same.</li> <li>FastAPI-Admin Admin interface for FastAPI which works with <code>TortoiseORM</code>.</li> <li>Dashboard Admin interface for ASGI frameworks which works with the <code>orm</code> package.</li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>SQLadmin does not enforce any authentication to your application, but provides an optional <code>AuthenticationBackend</code> you can use.</p>"},{"location":"authentication/#authenticationbackend","title":"AuthenticationBackend","text":"<p>SQLAdmin has a session-based authentication that will allow you to integrate any existing authentication to it.</p> <p>The class <code>AuthenticationBackend</code> has three methods you need to override:</p> <ul> <li><code>authenticate</code>: Will be called for validating each incoming request.</li> <li><code>login</code>: Will be called only in the login page to validate username/password.</li> <li><code>logout</code>: Will be called only for the logout, usually clearing the session.</li> </ul> <pre><code>from sqladmin import Admin\nfrom sqladmin.authentication import AuthenticationBackend\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\n\n\nclass AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -&gt; bool:\n        form = await request.form()\n        username, password = form[\"username\"], form[\"password\"]\n\n        # Validate username/password credentials\n        # And update session\n        request.session.update({\"token\": \"...\"})\n\n        return True\n\n    async def logout(self, request: Request) -&gt; bool:\n        # Usually you'd want to just clear the session\n        request.session.clear()\n        return True\n\n    async def authenticate(self, request: Request) -&gt; bool:\n        token = request.session.get(\"token\")\n\n        if not token:\n            return False\n\n        # Check the token in depth\n        return True\n\n\nauthentication_backend = AdminAuth(secret_key=\"...\")\nadmin = Admin(app=..., authentication_backend=authentication_backend\u060c ...)\n</code></pre> <p>Note</p> <p>In order to use AuthenticationBackend you need to install the <code>itsdangerous</code> package.</p> Full Example <pre><code>from sqladmin import Admin, ModelView\nfrom sqladmin.authentication import AuthenticationBackend\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.orm import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\n\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n\nBase.metadata.create_all(engine)\n\n\nclass AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -&gt; bool:\n        request.session.update({\"token\": \"...\"})\n        return True\n\n    async def logout(self, request: Request) -&gt; bool:\n        request.session.clear()\n        return True\n\n    async def authenticate(self, request: Request) -&gt; bool:\n        token = request.session.get(\"token\")\n\n        if not token:\n            return False\n\n        # Check the token in depth\n        return True\n\n\napp = Starlette()\nauthentication_backend = AdminAuth(secret_key=\"...\")\nadmin = Admin(app=app, engine=engine, authentication_backend=authentication_backend)\n\n\nclass UserAdmin(ModelView, model=User):\n    def is_visible(self, request: Request) -&gt; bool:\n        return True\n\n    def is_accessible(self, request: Request) -&gt; bool:\n        return True\n\n\nadmin.add_view(UserAdmin)\n</code></pre>"},{"location":"authentication/#using-oauth","title":"Using OAuth","text":"<p>You can also integrate OAuth into SQLAdmin, for this example we will integrate Google OAuth using <code>Authlib</code>. If you have followed the previous example, there are only two changes required to the authentication flow:</p> <pre><code>from typing import Union\n\nfrom authlib.integrations.starlette_client import OAuth\nfrom sqladmin.authentication import AuthenticationBackend\nfrom starlette.applications import Starlette\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\n\n\napp = Starlette()\napp.add_middleware(SessionMiddleware, secret_key=\"test\")\n\noauth = OAuth()\noauth.register(\n    'google',\n    client_id='...',\n    client_secret='...',\n    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n    client_kwargs={\n        'scope': 'openid email profile',\n        'prompt': 'select_account',\n    },\n)\ngoogle = oauth.create_client('google')\n\n\nclass AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -&gt; bool:\n        return True\n\n    async def logout(self, request: Request) -&gt; bool:\n        request.session.clear()\n        return True\n\n    async def authenticate(self, request: Request) -&gt; Union[bool, RedirectResponse]:\n        user = request.session.get(\"user\")\n        if not user:\n            redirect_uri = request.url_for('login_google')\n            return await google.authorize_redirect(request, redirect_uri)\n\n        return True\n\n\nadmin = Admin(app=app, engine=engine, authentication_backend=AdminAuth(\"test\"))\n\n\nasync def login_google(request: Request) -&gt; Response:\n    token = await google.authorize_access_token(request)\n    user = token.get('userinfo')\n    if user:\n        request.session['user'] = user\n    return RedirectResponse(request.url_for(\"admin:index\"))\n\n\nadmin.app.router.add_route(\"/auth/google\", login_google)\n</code></pre>"},{"location":"authentication/#permissions","title":"Permissions","text":"<p>The <code>ModelView</code> and <code>BaseView</code> classes in SQLAdmin implements two special methods you can override. You can use these methods to have control over each Model/View in addition to the AuthenticationBackend. So this is more like checking if the user has access to the specific Model or View.</p> <ul> <li><code>is_visible</code></li> <li><code>is_accessible</code></li> </ul> <p>As you might guess the <code>is_visible</code> controls if this Model/View should be displayed in the menu or not.</p> <p>The <code>is_accessible</code> controls if this Model/View should be accessed.</p> <p>Both methods implement the same signature and should return a boolean.</p> <p>Note</p> <p>For Model/View to be displayed in the sidebar both <code>is_visible</code> and <code>is_accessible</code> should return <code>True</code>.</p> <p>So in order to override these methods:</p> <pre><code>from starlette.requests import Request\n\n\nclass UserAdmin(ModelView, model=User):\n    def is_accessible(self, request: Request) -&gt; bool:\n        # Check incoming request\n        # For example request.session if using AuthenticationBackend\n        return True\n\n    def is_visible(self, request: Request) -&gt; bool:\n        # Check incoming request\n        # For example request.session if using AuthenticationBackend\n        return True\n</code></pre>"},{"location":"configurations/","title":"Configurations","text":"<p>SQLAdmin configuration options are heavily inspired by the Flask-Admin project.</p> <p>This page will give you a basic introduction and for all the details you can visit API Reference.</p> <p>Let's say you've defined your SQLAlchemy models like this:</p> <pre><code>from sqlalchemy import Column, Boolean, Integer, String, create_engine\nfrom sqlalchemy.orm import declarative_base, relationship\n\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    password = Column(String)\n    address = relationship(\"Address\", uselist=False, back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, primary_key=True)\n    user = relationship(\"User\", back_populates=\"address\")\n    street = Column(String)\n    city = Column(String)\n    state = Column(String)\n    zip = Column(Integer)\n    is_admin = Column(Boolean, default=False)\n\n\nBase.metadata.create_all(engine)  # Create tables\n</code></pre> <p>If you want to integrate SQLAdmin into FastAPI application:</p> <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\n\n\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>As you can see the <code>UserAdmin</code> class inherits from <code>ModelView</code> and accepts some configurations.</p>"},{"location":"configurations/#permissions","title":"Permissions","text":"<p>You can configure a few general permissions for this model. The following options are available:</p> <ul> <li><code>can_create</code>: If the model can create new instances via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_edit</code>: If the model instances can be edited via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_delete</code>: If the model instances can be deleted via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_view_details</code>: If the model instance details can be viewed via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_export</code>: If the model data can be exported in the list page. Default value is <code>True</code>.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    can_create = True\n    can_edit = True\n    can_delete = False\n    can_view_details = True\n</code></pre>"},{"location":"configurations/#metadata","title":"Metadata","text":"<p>The metadata for the model. The options are:</p> <ul> <li><code>name</code>: Display name for this model. Default value is the class name.</li> <li><code>name_plural</code>: Display plural name for this model. Default value is class name + <code>s</code>.</li> <li><code>icon</code>: Icon to be displayed for this model in the admin. Only FontAwesome and Tabler names are supported.</li> <li><code>category</code>: Category name to display group of <code>ModelView</code> classes together in dropdown.</li> <li><code>category_icon</code>: Category icon to display.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    name = \"User\"\n    name_plural = \"Users\"\n    icon = \"fa-solid fa-user\"\n    category = \"accounts\"\n    category_icon = \"fa-solid fa-user\"\n</code></pre>"},{"location":"configurations/#list-page","title":"List page","text":"<p>These options allow configurations in the list page, in the case of this example where you can view list of User records.</p> <p>The options available are:</p> <ul> <li><code>column_list</code>: List of columns or column names to be displayed in the list page.</li> <li><code>column_exclude_list</code>: List of columns or column names to be excluded in the list page.</li> <li><code>column_formatters</code>: Dictionary of column formatters in the list page.</li> <li><code>column_searchable_list</code>: List of columns or column names to be searchable in the list page.</li> <li><code>column_sortable_list</code>: List of columns or column names to be sortable in the list page.</li> <li><code>column_default_sort</code>: Default sorting if no sorting is applied, tuple of (column, is_descending)   or list of the tuple for multiple columns.</li> <li><code>list_query</code>: A method with the signature of <code>(request) -&gt; stmt</code> which can customize the list query.</li> <li><code>count_query</code>: A method with the signature of <code>(request) -&gt; stmt</code> which can customize the count query.</li> <li><code>search_query</code>: A method with the signature of <code>(stmt, term) -&gt; stmt</code> which can customize the search query.</li> <li><code>column_filters</code>: A list of objects that implement the <code>ColumnFilter</code> protocol to be displayed in the list page. See example below.</li> <li><code>details_query</code>: A method with the signature of <code>(request) -&gt; stmt</code> which can customize the details query.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name, \"address.zip_code\"]\n    column_searchable_list = [User.name]\n    column_sortable_list = [User.id]\n    column_formatters = {User.name: lambda m, a: m.name[:10]}\n    column_default_sort = [(User.email, True), (User.name, False)]\n    column_filterable_list = [User.is_admin]\n</code></pre> <p>Tip</p> <p>You can use the special keyword <code>\"__all__\"</code> in <code>column_list</code> or <code>column_details_list</code> if you don't want to specify all the columns manually. For example: <code>column_list = \"__all__\"</code></p>"},{"location":"configurations/#columnfilter","title":"ColumnFilter","text":"<p>A ColumnFilter is a class that defines a filter for a column. A few standard filters are implemented in <code>sqladmin.filters</code> module. Here is an example of a generic ColumnFilter. Note that the fields <code>title</code>, <code>parameter_name</code>, <code>lookups</code> and <code>get_filtered_query</code> are required.</p> <pre><code>class IsAdminFilter:\n    # Human-readable title which will be displayed in the\n    # right admin sidebar just above the filter options.\n    title = \"Is Admin\"\n\n    # Parameter for the filter that will be used in the URL query.\n    parameter_name = \"is_admin\"\n\n    def lookups(self, request, model) -&gt; list[tuple[str, str]]:\n        \"\"\"\n        Returns a list of tuples with the filter key and the human-readable label.\n        \"\"\"\n        return [\n            (\"all\", \"All\"),\n            (\"true\", \"Yes\"),\n            (\"false\", \"No\"),\n        ]\n\n    def get_filtered_query(self, query, value):\n        \"\"\"\n        Returns a filtered query based on the filter value.\n        \"\"\"\n        if value == \"true\":\n            return query.filter(model.is_admin == True)\n        elif value == \"false\":\n            return query.filter(model.is_admin == False)\n        else:\n            return query\n</code></pre>"},{"location":"configurations/#built-in-column-filters","title":"Built in Column Filters","text":"<p>The following built in column filters are available. All filters have a default value of \"all\" which allows the user to not filter the column</p> <ul> <li>BooleanFilter - A filter for boolean columns, with the values of Yes (true) and No (false)</li> <li>AllUniqueStringValuesFilter - A filter for string columns, with the values of all unique values in the column</li> <li>StaticValuesFilter - A filter for string columns, with the values of a static list of values. This is similar to AllUniqueStringValuesFilter, but instead of getting the list of possible values from the database, you can provide a static list of values.</li> <li>ForeignKeyFilter - A filter for foreign key columns, with the values of all unique values in the foreign key column. To make this filter readable, you need to provide the field name from the foreign model that you want to display as the name of the filter.</li> </ul> <p>Here is an example of how to use BooleanFilter, AllUniqueStringValuesFilter and ForeignKeyFilter:</p> <pre><code>class User(Base):\n    __tablename__ = \"users\"\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    name: Mapped[str] = mapped_column(String, nullable=False)\n    email: Mapped[str] = mapped_column(String, nullable=False, index=True, unique=True)\n    is_admin: Mapped[bool] = mapped_column(Boolean, default=False)\n    site_id: Mapped[Optional[int]] = mapped_column(Integer, ForeignKey(\"sites.id\"), nullable=True, default=None)\n    site: Mapped[Optional[\"Site\"]] = relationship(back_populates=\"users\")\n\nclass Site(Base):\n    __tablename__ = \"sites\"\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    name: Mapped[str] = mapped_column(String, nullable=False)\n    users: Mapped[list[\"User\"]] = relationship(back_populates=\"site\")\n\n\n# Define User Admin View\nclass UserAdmin(ModelView, model=User):\n    column_list = [\"id\", \"name\", \"email\", \"is_admin\"]\n    column_filters = [\n        BooleanFilter(User.is_admin), \n        AllUniqueStringValuesFilter(User.name),\n        ForeignKeyFilter(User.site_id, Site.name, title=\"Site\")\n    ]\n    can_create = True\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n    name = \"User\"\n    name_plural = \"Users\"\n    icon = \"fa-solid fa-user\"\n    identity = \"user\"\n</code></pre>"},{"location":"configurations/#details-page","title":"Details page","text":"<p>These options allow configurations in the details page, in the case of this example where you can view details of a single User.</p> <p>The options available are:</p> <ul> <li><code>column_details_list</code>: List of columns or column names to be displayed in the details page.</li> <li><code>column_details_exclude_list</code>: List of columns or column names to be excluded in the details page.</li> <li><code>column_formatters_detail</code>: Dictionary of column formatters in the details page.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    column_details_list = [User.id, User.name, \"address.zip_code\"]\n    column_formatters_detail = {User.name: lambda m, a: m.name[:10]}\n</code></pre> <p>Tip</p> <p>You can show related model's attributes by using a string value. For example \"address.zip_code\" will load the relationship but it will trigger extra queries for each relationship loading.</p>"},{"location":"configurations/#pagination-options","title":"Pagination options","text":"<p>The pagination options in the list page can be configured. The available options include:</p> <ul> <li><code>page_size</code>: Default page size in pagination. Default is <code>10</code>.</li> <li><code>page_size_options</code>: Pagination selector options. Default is <code>[10, 25, 50, 100]</code>.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    page_size = 50\n    page_size_options = [25, 50, 100, 200]\n</code></pre>"},{"location":"configurations/#general-options","title":"General options","text":"<p>There are a few options which apply to both List and Detail pages. They include:</p> <ul> <li><code>column_labels</code>: A mapping of column labels, used to map column names to new names in all places.</li> <li><code>column_type_formatters</code>: A mapping of type keys and callable values to format in all places.   For example you can add custom date formatter to be used in both list and detail pages.</li> <li><code>save_as</code>: A boolean to enable \"save as new\" option when editing an object.</li> <li><code>save_as_continue</code>: A boolean to control the redirect URL if <code>save_as</code> is enabled.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    def date_format(value):\n        return value.strftime(\"%d.%m.%Y\")\n\n    column_labels = {User.mail: \"Email\"}\n    column_type_formatters = dict(ModelView.column_type_formatters, date=date_format)\n    save_as = True\n</code></pre>"},{"location":"configurations/#form-options","title":"Form options","text":"<p>SQLAdmin allows customizing how forms work with your models. The forms are based on <code>WTForms</code> package and include the following options:</p> <ul> <li><code>form</code>: Default form to be used for creating or editing the model. Default value is <code>None</code> and form is created dynamically.</li> <li><code>form_base_class</code>: Default base class for creating forms. Default value is <code>wtforms.Form</code>.</li> <li><code>form_args</code>: Dictionary of form field arguments supported by WTForms.</li> <li><code>form_widget_args</code>: Dictionary of form widget rendering arguments supported by WTForms.</li> <li><code>form_columns</code>: List of model columns to be included in the form. Default is all model columns.</li> <li><code>form_excluded_columns</code>: List of model columns to be excluded from the form.</li> <li><code>form_overrides</code>: Dictionary of form fields to override when creating the form.</li> <li><code>form_include_pk</code>: Control if primary key column should be included in create/edit forms. Default is <code>False</code>.</li> <li><code>form_ajax_refs</code>: Use Ajax with Select2 for loading relationship models async. This is use ful when the related model has a lot of records.</li> <li><code>form_converter</code>: Allow adding custom converters to support additional column types.</li> <li><code>form_edit_query</code>: A method with the signature of <code>(request) -&gt; stmt</code> which can customize the edit form data.</li> <li><code>form_rules</code>: List of form rules to manage rendering and behaviour of form.</li> <li><code>form_create_rules</code>: List of form rules to manage rendering and behaviour of form in create page.</li> <li><code>form_edit_rules</code>: List of form rules to manage rendering and behaviour of form in edit page.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    form_columns = [User.name]\n    form_args = dict(name=dict(label=\"Full name\"))\n    form_widget_args = dict(email=dict(readonly=True))\n    form_overrides = dict(email=wtforms.EmailField)\n    form_include_pk = True\n    form_ajax_refs = {\n        \"address\": {\n            \"fields\": (\"zip_code\", \"street\"),\n            \"order_by\": (\"id\",),\n        }\n    }\n    form_create_rules = [\"name\", \"password\"]\n    form_edit_rules = [\"name\"]\n</code></pre>"},{"location":"configurations/#related-models","title":"Related models","text":"<p>To define how related model is displayed in the dropdown, <code>__str__</code> method must be difined in the related model.</p>"},{"location":"configurations/#export-options","title":"Export options","text":"<p>SQLAdmin supports exporting data in the list page. Currently only CSV export is supported. The export options can be set per model and includes the following options:</p> <ul> <li><code>can_export</code>: If the model can be exported. Default value is <code>True</code>.</li> <li><code>column_export_list</code>: List of columns to include in the export data. Default is all model columns.</li> <li><code>column_export_exclude_list</code>: List of columns to exclude in the export data.</li> <li><code>export_max_rows</code>: Maximum number of rows to be exported. Default value is <code>0</code> which means unlimited.</li> <li><code>export_types</code>: List of export types to be enabled. Default value is <code>[\"csv\",\"json\"]</code>.</li> </ul>"},{"location":"configurations/#templates","title":"Templates","text":"<p>The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are:</p> <ul> <li><code>list_template</code>: Template to use for models list page. Default is <code>sqladmin/list.html</code>.</li> <li><code>create_template</code>: Template to use for model creation page. Default is <code>sqladmin/create.html</code>.</li> <li><code>details_template</code>: Template to use for model details page. Default is <code>sqladmin/details.html</code>.</li> <li><code>edit_template</code>: Template to use for model edit page. Default is <code>sqladmin/edit.html</code>.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    list_template = \"custom_list.html\"\n</code></pre> <p>For more information about working with template see Working with Templates.</p>"},{"location":"configurations/#template-configurations","title":"Template configurations","text":"<p>The following options are available to configure the templates:</p> <ul> <li><code>show_compact_lists</code>: If <code>False</code>, the list of objects will be displayed in a separate line for each object. Default is <code>True</code>.</li> </ul>"},{"location":"configurations/#events","title":"Events","text":"<p>There might be some cases which you want to do some actions before or after a model was created, updated or deleted.</p> <p>There are four methods you can override to achieve this:</p> <ul> <li><code>on_model_change</code>: Called before a model was created or updated.</li> <li><code>after_model_change</code>: Called after a model was created or updated.</li> <li><code>on_model_delete</code>: Called before a model was deleted.</li> <li><code>after_model_delete</code>: Called after a model was deleted.</li> </ul> <p>By default these methods do nothing.</p> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    async def on_model_change(self, data, model, is_created, request):\n        # Perform some other action\n        ...\n\n    async def on_model_delete(self, model, request):\n        # Perform some other action\n        ...\n</code></pre>"},{"location":"configurations/#custom-action","title":"Custom Action","text":"<p>To add custom action on models to the Admin, you can use the <code>action</code> decorator.</p> <p>Example</p> <pre><code>from sqladmin import BaseView, action\n\nclass UserAdmin(ModelView, model=User):\n    @action(\n        name=\"approve_users\",\n        label=\"Approve\",\n        confirmation_message=\"Are you sure?\",\n        add_in_detail=True,\n        add_in_list=True,\n    )\n    async def approve_users(self, request: Request):\n        pks = request.query_params.get(\"pks\", \"\").split(\",\")\n        if pks:\n            for pk in pks:\n                model: User = await self.get_object_for_edit(pk)\n                ...\n\n        referer = request.headers.get(\"Referer\")\n        if referer:\n            return RedirectResponse(referer)\n        else:\n            return RedirectResponse(request.url_for(\"admin:list\", identity=self.identity))\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>The available options for <code>action</code> are:</p> <ul> <li><code>name</code>: A string name to be used in URL for this action.</li> <li><code>label</code>: A string for describing this action.</li> <li><code>add_in_list</code>: A boolean indicating if this action should be available in list page.</li> <li><code>add_in_detail</code>: A boolean indicating if this action should be available in detail page.</li> <li><code>confirmation_message</code>: A string message that if defined, will open a modal to ask for confirmation before calling the action method.</li> </ul>"},{"location":"model_convertors/","title":"Model convertors","text":""},{"location":"model_convertors/#model-converters","title":"Model Converters","text":"<p>Model Converters are special classes used to convert SQLAlchemy model properties into web interface form fields. They allow you to customize how backend SQLAlchemy models are represented in the admin interface, providing flexibility in handling different data types and validation rules.</p>"},{"location":"model_convertors/#overview","title":"Overview","text":"<p>The <code>ModelConverter</code> class is the base class for converting SQLAlchemy model properties into form fields. It provides default conversions for common SQLAlchemy types (e.g., <code>String</code>, <code>Integer</code>, <code>JSON</code>) and allows you to customize or extend these conversions.</p>"},{"location":"model_convertors/#base-model-converter","title":"Base Model Converter","text":"<p>The base <code>ModelConverter</code> class looks like this:</p> <pre><code>class ModelConverter(ModelConverterBase):\n    @staticmethod\n    def _string_common(prop: ColumnProperty) -&gt; list[Validator]:\n        li = []\n        column: Column = prop.columns[0]\n        if isinstance(column.type.length, int) and column.type.length:\n            li.append(validators.Length(max=column.type.length))\n        return li\n\n    @converts(\"String\", \"CHAR\")  # includes Unicode\n    def conv_string(\n        self, model: type, prop: ColumnProperty, kwargs: dict[str, Any]\n    ) -&gt; UnboundField:\n        extra_validators = self._string_common(prop)\n        kwargs.setdefault(\"validators\", [])\n        kwargs[\"validators\"].extend(extra_validators)\n        return StringField(**kwargs)\n\n    @converts(\"Text\", \"LargeBinary\", \"Binary\")  # includes UnicodeText\n    def conv_text(\n        self, model: type, prop: ColumnProperty, kwargs: dict[str, Any]\n    ) -&gt; UnboundField:\n        kwargs.setdefault(\"validators\", [])\n        extra_validators = self._string_common(prop)\n        kwargs[\"validators\"].extend(extra_validators)\n        return TextAreaField(**kwargs)\n</code></pre> <p>This class includes methods like <code>conv_string</code> and <code>conv_text</code> to handle specific SQLAlchemy types. You can extend this class to add custom behavior or override existing conversions.</p>"},{"location":"model_convertors/#customizing-model-converters","title":"Customizing Model Converters","text":"<p>You can inherit from <code>ModelConverter</code> to create your own converter and customize how specific SQLAlchemy types are handled. For example, you can define a custom converter for <code>JSON</code> fields:</p> <pre><code>from typing import Any\nimport json\nfrom wtforms import JSONField\nfrom sqladmin import ModelConverter\n\n\nclass CustomJSONField(JSONField):\n    def _value(self) -&gt; str:\n        if self.raw_data:\n            return self.raw_data[0]\n        elif self.data:\n            return str(json.dumps(self.data, ensure_ascii=False))\n        else:\n            return \"\"\n\n\nclass CustomModelConverter(ModelConverter):\n    @converts(\"JSON\", \"JSONB\")\n    def conv_json(self, model: type, prop: ColumnProperty, kwargs: dict[str, Any]) -&gt; UnboundField:\n        return CustomJSONField(**kwargs)\n</code></pre> <p>In this example: - <code>CustomJSONField</code> is a custom field that formats JSON data for display. - <code>CustomModelConverter</code> overrides the <code>conv_json</code> method to use <code>CustomJSONField</code> for <code>JSON</code> and <code>JSONB</code> SQLAlchemy types.</p>"},{"location":"model_convertors/#using-custom-model-converters-in-admin-views","title":"Using Custom Model Converters in Admin Views","text":"<p>To use your custom model converter in the admin interface, specify it in your <code>ModelView</code> class:</p> <pre><code>from sqladmin import ModelView\n\n\nclass BaseAdmin(ModelView):\n    form_converter: ClassVar[Type[CustomModelConverter]] = CustomModelConverter\n</code></pre> <p>This ensures that all form fields in the admin interface are generated using your custom converter.</p>"},{"location":"model_convertors/#example-full-workflow","title":"Example: Full Workflow","text":"<p>Here\u2019s a complete example of defining a SQLAlchemy model, creating a custom model converter, and using it in the admin interface:</p>"},{"location":"model_convertors/#step-1-define-sqlalchemy-models","title":"Step 1: Define SQLAlchemy Models","text":"<pre><code>from sqlalchemy import Column, Integer, String, JSON, create_engine\nfrom sqlalchemy.orm import declarative_base\n\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///example.db\", connect_args={\"check_same_thread\": False})\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    preferences = Column(JSON)\n\n\nBase.metadata.create_all(engine)  # Create tables\n</code></pre>"},{"location":"model_convertors/#step-2-create-custom-model-converter","title":"Step 2: Create Custom Model Converter","text":"<pre><code>from sqladmin import ModelConverter\nfrom wtforms import JSONField\nimport json\n\n\nclass CustomJSONField(JSONField):\n    def _value(self) -&gt; str:\n        if self.raw_data:\n            return self.raw_data[0]\n        elif self.data:\n            return str(json.dumps(self.data, ensure_ascii=False))\n        else:\n            return \"\"\n\n\nclass CustomModelConverter(ModelConverter):\n    @converts(\"JSON\", \"JSONB\")\n    def conv_json(self, model: type, prop: ColumnProperty, kwargs: dict[str, Any]) -&gt; UnboundField:\n        return CustomJSONField(**kwargs)\n</code></pre>"},{"location":"model_convertors/#step-3-use-custom-converter-in-admin-interface","title":"Step 3: Use Custom Converter in Admin Interface","text":"<pre><code>from sqladmin import ModelView\n\n\nclass UserAdmin(BaseAdmin):\n    form_converter = CustomModelConverter\n</code></pre>"},{"location":"working_with_files/","title":"Working with Files and Images","text":"<p>You can use fastapi-storages package to make file management easy in <code>SQLAdmin</code>.</p> <p>Right now <code>fastapi-storages</code> provides two storage backends:</p> <ul> <li><code>FileSystemStorage</code> for storing files in local file system.</li> <li><code>S3Storage</code> for storing files in Amazon S3 or S3-compatible storages.</li> </ul> <p>It also includes custom SQLAlchemy types to make it easier to integrate into <code>SQLAdmin</code>:</p> <ul> <li><code>FileType</code></li> <li><code>ImageType</code></li> </ul> <p>Let's see a minimal example:</p> <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\nfrom sqlalchemy import Column, Integer, create_engine\nfrom sqlalchemy.orm import declarative_base\nfrom fastapi_storages import FileSystemStorage\nfrom fastapi_storages.integrations.sqlalchemy import FileType\n\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///example.db\")\napp = FastAPI()\nadmin = Admin(app, engine)\nstorage = FileSystemStorage(path=\"/tmp\")\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)    \n    file = Column(FileType(storage=storage))\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.file]\n\n\nBase.metadata.create_all(engine)  # Create tables\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>First we define a <code>FileSystemStorage(path=\"/tmp\")</code> and configure it to use our local <code>/tmp</code> directory for file uploads. Then we define a custom field called <code>file</code> in our model using the <code>FileType</code> and our storage.</p> <p>Now visiting <code>/admin/user</code> to create a new User, there's an HTML file field to upload files form local. After creating the file you will see that the file name is stored in the database and displayed in the admin dashboard.</p> <p>You can replace <code>FileSystemStorage</code> with <code>S3Storage</code> to upload to S3 or any S3-compatible API.</p> <p>For complete features and API reference of the <code>fastapi-storages</code> you can visit the docs at https://aminalaee.github.io/fastapi-storages.</p>"},{"location":"working_with_templates/","title":"Working with Templates","text":"<p>The template uses <code>Jinja2</code> template engine and by default looks for a <code>templates/sqladmin</code> directory in your project.</p> <p>If your <code>templates/sqladmin</code> directory has the default template files like <code>list.html</code> or <code>create.html</code> then they will be used. Otherwise you can create custom templates and use them.</p>"},{"location":"working_with_templates/#customizing-templates","title":"Customizing templates","text":"<p>As the first step you should create a <code>templates/sqladmin</code> directory in you project.</p> <p>Since <code>Jinja2</code> is modular, you can override your specific template file and do your changes. For example you can create a <code>custom_details.html</code> file which overrides the <code>details.html</code> from SQLAdmin and in the <code>content</code> block it adds custom HTML tags:</p> <p>Example</p> custom_details.html<pre><code>{% extends \"sqladmin/details.html\" %}\n{% block content %}\n    {{ super() }}\n    &lt;p&gt;Custom HTML&lt;/p&gt;\n{% endblock %}\n</code></pre> admin.py<pre><code>class UserAdmin(ModelView, model=User):\n    details_template = \"custom_details.html\"\n</code></pre>"},{"location":"working_with_templates/#overriding-default-templates","title":"Overriding default templates","text":"<p>If you need to change one of the existing default templates in SQLAdmin such that it affects multiple pages, you can do so by copying the existing template from <code>templates/sqladmin</code> into your <code>templates/sqladmin</code> directory. It will then be used instead of the one in the package. For example if there is some Javascript you want to run on every page you may want to do it in layout.html like so:</p> <p>Example</p> myproject/templates/sqladmin/layout.html<pre><code>...\n&lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n\n{% block tail %}\n&lt;script type=\"text/javascript\"&gt;\n    console.log('hello world');\n&lt;/script&gt;\n{% endblock %}\n</code></pre>"},{"location":"working_with_templates/#customizing-jinja2-environment","title":"Customizing Jinja2 environment","text":"<p>You can add custom environment options to use it on your custom templates. First set up a project:</p> <pre><code>from sqladmin import Admin\nfrom starlette.applications import Starlette\n\n\napp = Starlette()\nadmin = Admin(app, engine)\n</code></pre> <p>Then you can add your environment options:</p>"},{"location":"working_with_templates/#adding-filters","title":"Adding filters","text":"<pre><code>def datetime_format(value, format=\"%H:%M %d-%m-%y\"):\n    return value.strftime(format)\n\nadmin.templates.env.filters[\"datetime_format\"] = datetime_format\n</code></pre> <p>Usage in templates:</p> <pre><code>{{ article.pub_date|datetimeformat }}\n{{ article.pub_date|datetimeformat(\"%B %Y\") }}\n</code></pre>"},{"location":"working_with_templates/#adding-tests","title":"Adding tests","text":"<pre><code>import math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n\n    for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\nadmin.templates.env.tests[\"prime\"] = is_prime\n</code></pre> <p>Usage in templates:</p> <pre><code>{% if value is prime %}\n    {{ value }} is a prime number\n{% else %}\n    {{ value }} is not a prime number\n{% endif %}\n</code></pre>"},{"location":"working_with_templates/#adding-globals","title":"Adding globals","text":"<pre><code>def value_is_filepath(value: Any) -&gt; bool:\n    return isinstance(value, str) and os.path.isfile(value)\n\nadmin.templates.env.globals[\"value_is_filepath\"] = value_is_filepath\n</code></pre> <p>Usage in templates:</p> <pre><code>{% if value_is_filepath(value) %}\n    {{ value }} is file path\n{% else %}\n    {{ value }} is not file path\n{% endif %}\n</code></pre>"},{"location":"writing_custom_views/","title":"Working with Custom Views","text":""},{"location":"writing_custom_views/#basic-example","title":"Basic example","text":"<p>You might need to add custom views to the existing SQLAdmin views, for example to create dashboards, show custom info or add new forms.</p> <p>To add custom views to the Admin interface, you can use the <code>BaseView</code> included in SQLAdmin. Here's an example to add custom views:</p> <p>Example</p> <pre><code>from sqladmin import BaseView, expose\n\nclass ReportView(BaseView):\n    name = \"Report Page\"\n    icon = \"fa-solid fa-chart-line\"\n\n    @expose(\"/report\", methods=[\"GET\"])\n    async def report_page(self, request):\n        return await self.templates.TemplateResponse(request, \"report.html\")\n\nadmin.add_view(ReportView)\n</code></pre> <p>This will assume there's a <code>templates</code> directory in your project and you have created a <code>report.html</code> in that directory.</p> <p>If you want to use a custom directory name, you can change that with:</p> <pre><code>from sqladmin import Admin\n\nadmin = Admin(templates_dir=\"my_templates\", ...)\n</code></pre> <p>Now visiting <code>/admin/report</code> you can render your <code>report.html</code> file.</p> <p>It is also possible to use the expose decorator to add extra endpoints to a ModelView.  The <code>path</code> is in this case prepended with the view's identity, in this case <code>/admin/user/profile/{pk}</code>.</p> <p>Example</p> <pre><code>from sqladmin import ModelView, expose\n\nclass UserView(ModelView):\n\n    @expose(\"/profile/{pk}\", methods=[\"GET\"])\n    async def profile(self, request):\n        user: User = await self.get_object_for_edit(request)\n        return await self.templates.TemplateResponse(\n            request, \"user.html\", {\"user\": user}\n        )\n\nadmin.add_view(UserView)\n</code></pre>"},{"location":"writing_custom_views/#database-access","title":"Database access","text":"<p>The example above was very basic and you probably want to access database and SQLAlchemy models in your custom view. You can use <code>sessionmaker</code> the same way SQLAdmin is using it to do so:</p> <p>Example</p> <pre><code>from sqlalchemy import Column, Integer, String, select, func\nfrom sqlalchemy.orm import sessionmaker, declarative_base\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqladmin import Admin, BaseView, expose\nfrom starlette.applications import Starlette\n\nBase = declarative_base()\nengine = create_async_engine(\"sqlite+aiosqlite:///test.db\")\nSession = sessionmaker(bind=engine, class_=AsyncSession)\n\napp = Starlette()\nadmin = Admin(app=app, engine=engine)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(length=16))\n\n\nclass ReportView(BaseView):\n    name = \"Report Page\"\n    icon = \"fa-solid fa-chart-line\"\n\n    @expose(\"/report\", methods=[\"GET\"])\n    async def report_page(self, request):\n        # async with engine.begin() as conn:\n        #     await conn.run_sync(Base.metadata.create_all)\n\n        async with Session(expire_on_commit=False) as session:\n            stmt = select(func.count(User.id))\n            result = await session.execute(stmt)\n            users_count = result.scalar_one()\n\n        return await self.templates.TemplateResponse(\n            request,\n            \"report.html\",\n            context={\"users_count\": users_count},\n        )\n\n\nadmin.add_view(ReportView)\n</code></pre> <p>Next we update the <code>report.html</code> file in the <code>templates</code> directory with the following content:</p> <p>Example</p> <pre><code>{% extends \"sqladmin/layout.html\" %}\n{% block content %}\n&lt;div class=\"col-12\"&gt;\n&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-header\"&gt;\n    &lt;h3 class=\"card-title\"&gt;User reports&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class=\"card-body border-bottom py-3\"&gt;\n    Users count: {{ users_count }}\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Now running your server you can head to <code>/admin/report</code> and you can see the number of users.</p>"},{"location":"api_reference/application/","title":"Application","text":""},{"location":"api_reference/application/#sqladmin.application.Admin","title":"<code>sqladmin.application.Admin</code>","text":"<p>               Bases: <code>BaseAdminView</code></p> <p>Main entrypoint to admin interface.</p> Usage <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\n\nfrom mymodels import User # SQLAlchemy model\n\n\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre>"},{"location":"api_reference/application/#sqladmin.application.Admin.__init__","title":"<code>__init__(app, engine=None, session_maker=None, base_url='/admin', title='Admin', logo_url=None, favicon_url=None, middlewares=None, debug=False, templates_dir='templates', authentication_backend=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>app</code> <code>Starlette</code> <p>Starlette or FastAPI application.</p> required <code>engine</code> <code>ENGINE_TYPE | None</code> <p>SQLAlchemy engine instance.</p> <code>None</code> <code>session_maker</code> <code>sessionmaker | 'async_sessionmaker' | None</code> <p>SQLAlchemy sessionmaker instance.</p> <code>None</code> <code>base_url</code> <code>str</code> <p>Base URL for Admin interface.</p> <code>'/admin'</code> <code>title</code> <code>str</code> <p>Admin title.</p> <code>'Admin'</code> <code>logo_url</code> <code>str | None</code> <p>URL of logo to be displayed instead of title.</p> <code>None</code> <code>favicon_url</code> <code>str | None</code> <p>URL of favicon to be displayed.</p> <code>None</code>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin","title":"<code>sqladmin.application.BaseAdmin</code>","text":"<p>Base class for implementing Admin interface.</p> Danger <p>This class should almost never be used directly.</p>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.views","title":"<code>views</code>  <code>property</code>","text":"<p>Get list of ModelView and BaseView instances lazily.</p> <p>Returns:</p> Type Description <code>list[BaseView | ModelView]</code> <p>List of ModelView and BaseView instances added to Admin.</p>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.add_view","title":"<code>add_view(view)</code>","text":"<p>Add ModelView or BaseView classes to Admin. This is a shortcut that will handle both <code>add_model_view</code> and <code>add_base_view</code>.</p>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.add_model_view","title":"<code>add_model_view(view)</code>","text":"<p>Add ModelView to the Admin.</p> Usage <pre><code>from sqladmin import Admin, ModelView\n\nclass UserAdmin(ModelView, model=User):\n    pass\n\nadmin.add_model_view(UserAdmin)\n</code></pre>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.add_base_view","title":"<code>add_base_view(view)</code>","text":"<p>Add BaseView to the Admin.</p> Usage <pre><code>from sqladmin import BaseView, expose\n\nclass CustomAdmin(BaseView):\n    name = \"Custom Page\"\n    icon = \"fa-solid fa-chart-line\"\n\n    @expose(\"/custom\", methods=[\"GET\"])\n    async def test_page(self, request: Request):\n        return await self.templates.TemplateResponse(request, \"custom.html\")\n\nadmin.add_base_view(CustomAdmin)\n</code></pre>"},{"location":"api_reference/application/#sqladmin.application.action","title":"<code>sqladmin.application.action(name, label=None, confirmation_message=None, *, include_in_schema=True, add_in_detail=True, add_in_list=True)</code>","text":"<p>Decorate a <code>ModelView</code> function with this to:</p> <ul> <li>expose it as a custom \"action\" route</li> <li>add a button to the admin panel to invoke the action</li> </ul> <p>When invoked from the admin panel, the following query parameter(s) are passed:</p> <ul> <li><code>pks</code>: the comma-separated list of selected object PKs - can be empty</li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique name for the action - should be alphanumeric, dash and underscore</p> required <code>label</code> <code>str | None</code> <p>Human-readable text describing action</p> <code>None</code> <code>confirmation_message</code> <code>str | None</code> <p>Message to show before confirming action</p> <code>None</code> <code>include_in_schema</code> <code>bool</code> <p>Indicating if the endpoint be included in the schema</p> <code>True</code> <code>add_in_detail</code> <code>bool</code> <p>Indicating if action should be dispalyed on model detail page</p> <code>True</code> <code>add_in_list</code> <code>bool</code> <p>Indicating if action should be dispalyed on model list page</p> <code>True</code>"},{"location":"api_reference/authentication/","title":"Authentication","text":""},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend","title":"<code>sqladmin.authentication.AuthenticationBackend</code>","text":"<p>Base class for implementing the Authentication into SQLAdmin. You need to inherit this class and override the methods: <code>login</code>, <code>logout</code> and <code>authenticate</code>.</p>"},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.__init__","title":"<code>__init__(secret_key)</code>","text":""},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.authenticate","title":"<code>authenticate(request)</code>  <code>async</code>","text":"<p>Implement authenticate logic here. This method will be called for each incoming request to validate the authentication.</p> <p>If a <code>Response</code> or <code>RedirectResponse</code> is returned, that response is returned to the user, otherwise a True/False is expected.</p>"},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.login","title":"<code>login(request)</code>  <code>async</code>","text":"<p>Implement login logic here. You can access the login form data <code>await request.form()</code> andvalidate the credentials.</p>"},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.logout","title":"<code>logout(request)</code>  <code>async</code>","text":"<p>Implement logout logic here. This will usually clear the session with <code>request.session.clear()</code>.</p> <p>If a <code>Response</code> or <code>RedirectResponse</code> is returned, that response is returned to the user, otherwise the user will be redirected to the index page.</p>"},{"location":"api_reference/base_view/","title":"BaseView","text":""},{"location":"api_reference/base_view/#sqladmin.models.BaseView","title":"<code>sqladmin.models.BaseView</code>","text":"<p>               Bases: <code>BaseModelView</code></p> <p>Base class for defining admnistrative views for the model.</p> Usage <pre><code>from sqladmin import BaseView, expose\n\nclass CustomAdmin(BaseView):\n    name = \"Custom Page\"\n    icon = \"fa-solid fa-chart-line\"\n\n    @expose(\"/custom\", methods=[\"GET\"])\n    async def test_page(self, request: Request):\n        return await self.templates.TemplateResponse(request, \"custom.html\")\n\nadmin.add_base_view(CustomAdmin)\n</code></pre>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.name","title":"<code>name = ''</code>  <code>class-attribute</code>","text":"<p>Name of the view to be displayed.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.identity","title":"<code>identity = ''</code>  <code>class-attribute</code>","text":"<p>Same as name but it will be used for URL of the endpoints.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.methods","title":"<code>methods = ['GET']</code>  <code>class-attribute</code>","text":"<p>List of method names for the endpoint. By default it's set to <code>[\"GET\"]</code> only.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.icon","title":"<code>icon = ''</code>  <code>class-attribute</code>","text":"<p>Display icon for ModelAdmin in the sidebar. Currently only supports FontAwesome and Tabler icons.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.include_in_schema","title":"<code>include_in_schema = True</code>  <code>class-attribute</code>","text":"<p>Control whether this endpoint should be included in the schema.</p>"},{"location":"api_reference/model_view/","title":"ModelView","text":""},{"location":"api_reference/model_view/#sqladmin.models.ModelView","title":"<code>sqladmin.models.ModelView</code>","text":"<p>               Bases: <code>BaseView</code></p> <p>Base class for defining admnistrative behaviour for the model.</p> Usage <pre><code>from sqladmin import ModelView\n\nfrom mymodels import User # SQLAlchemy model\n\nclass UserAdmin(ModelView, model=User):\n    can_create = True\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.name_plural","title":"<code>name_plural = ''</code>  <code>class-attribute</code>","text":"<p>Plural name of ModelView. Default value is Model class name + <code>s</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_labels","title":"<code>column_labels = {}</code>  <code>class-attribute</code>","text":"<p>A mapping of column labels, used to map column names to new names. Dictionary keys can be string names or SQLAlchemy columns with string values.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_labels = {User.mail: \"Email\"}\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_create","title":"<code>can_create = True</code>  <code>class-attribute</code>","text":"<p>Permission for creating new Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_edit","title":"<code>can_edit = True</code>  <code>class-attribute</code>","text":"<p>Permission for editing Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_delete","title":"<code>can_delete = True</code>  <code>class-attribute</code>","text":"<p>Permission for deleting Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_view_details","title":"<code>can_view_details = True</code>  <code>class-attribute</code>","text":"<p>Permission for viewing full details of Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_list","title":"<code>column_list = []</code>  <code>class-attribute</code>","text":"<p>List of columns to display in <code>List</code> page. Columns can either be string names or SQLAlchemy columns.</p> Note <p>By default only Model primary key is displayed.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_exclude_list","title":"<code>column_exclude_list = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude in <code>List</code> page. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_exclude_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_formatters","title":"<code>column_formatters = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of list view column formatters. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_formatters = {User.name: lambda m, a: m.name[:10]}\n</code></pre> <p>The format function has the prototype:</p> Formatter <pre><code>def formatter(model, attribute):\n    # `model` is model instance\n    # `attribute` is a Union[ColumnProperty, RelationshipProperty]\n    pass\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_formatters_detail","title":"<code>column_formatters_detail = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of details view column formatters. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_formatters_detail = {User.name: lambda m, a: m.name[:10]}\n</code></pre> <p>The format function has the prototype:</p> Formatter <pre><code>def formatter(model, attribute):\n    # `model` is model instance\n    # `attribute` is a Union[ColumnProperty, RelationshipProperty]\n    pass\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.page_size","title":"<code>page_size = 10</code>  <code>class-attribute</code>","text":"<p>Default number of items to display in <code>List</code> page pagination. Default value is set to <code>10</code>.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    page_size = 25\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.page_size_options","title":"<code>page_size_options = [10, 25, 50, 100]</code>  <code>class-attribute</code>","text":"<p>Pagination choices displayed in <code>List</code> page. Default value is set to <code>[10, 25, 50, 100]</code>.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    page_size_options = [50, 100]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_details_list","title":"<code>column_details_list = []</code>  <code>class-attribute</code>","text":"<p>List of columns to display in <code>Detail</code> page. Columns can either be string names or SQLAlchemy columns.</p> Note <p>By default all columns of Model are displayed.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_details_list = [User.id, User.name, User.mail]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_details_exclude_list","title":"<code>column_details_exclude_list = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude from displaying in <code>Detail</code> page. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_details_exclude_list = [User.mail]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.list_template","title":"<code>list_template = 'sqladmin/list.html'</code>  <code>class-attribute</code>","text":"<p>List view template. Default is <code>sqladmin/list.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.create_template","title":"<code>create_template = 'sqladmin/create.html'</code>  <code>class-attribute</code>","text":"<p>Create view template. Default is <code>sqladmin/create.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.details_template","title":"<code>details_template = 'sqladmin/details.html'</code>  <code>class-attribute</code>","text":"<p>Details view template. Default is <code>sqladmin/details.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.edit_template","title":"<code>edit_template = 'sqladmin/edit.html'</code>  <code>class-attribute</code>","text":"<p>Edit view template. Default is <code>sqladmin/edit.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_searchable_list","title":"<code>column_searchable_list = []</code>  <code>class-attribute</code>","text":"<p>A collection of the searchable columns. It is assumed that only text-only fields are searchable, but it is up to the model implementation to decide.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_searchable_list = [User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_sortable_list","title":"<code>column_sortable_list = []</code>  <code>class-attribute</code>","text":"<p>Collection of the sortable columns for the list view.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_sortable_list = [User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_default_sort","title":"<code>column_default_sort = []</code>  <code>class-attribute</code>","text":"<p>Default sort column if no sorting is applied.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_default_sort = \"email\"\n</code></pre> <p>You can use tuple to control ascending descending order. In following example, items will be sorted in descending order:</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_default_sort = (\"email\", True)\n</code></pre> <p>If you want to sort by more than one column, you can pass a list of tuples</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_default_sort = [(\"email\", True), (\"name\", False)]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_export","title":"<code>can_export = True</code>  <code>class-attribute</code>","text":"<p>Permission for exporting lists of Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_export_list","title":"<code>column_export_list = []</code>  <code>class-attribute</code>","text":"<p>List of columns to include when exporting. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_export_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_export_exclude_list","title":"<code>column_export_exclude_list = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude when exporting. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_export_exclude_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.export_types","title":"<code>export_types = ['csv', 'json']</code>  <code>class-attribute</code>","text":"<p>A list of available export filetypes. Currently only <code>csv</code> is supported.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.export_max_rows","title":"<code>export_max_rows = 0</code>  <code>class-attribute</code>","text":"<p>Maximum number of rows allowed for export. Unlimited by default.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form","title":"<code>form = None</code>  <code>class-attribute</code>","text":"<p>Form class. Override if you want to use custom form for your model. Will completely disable form scaffolding functionality.</p> Example <pre><code>class MyForm(Form):\n    name = StringField('Name')\n\nclass MyModelView(ModelView, model=User):\n    form = MyForm\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_args","title":"<code>form_args = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of form field arguments. Refer to WTForms documentation for list of possible options.</p> Example <pre><code>from wtforms.validators import DataRequired\n\nclass MyModelView(ModelView, model=User):\n    form_args = dict(\n        name=dict(label=\"User Name\", validators=[DataRequired()])\n    )\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_columns","title":"<code>form_columns = []</code>  <code>class-attribute</code>","text":"<p>List of columns to include in the form. Columns can either be string names or SQLAlchemy columns.</p> Note <p>By default all columns of Model are included in the form.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_columns = [User.name, User.mail]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_excluded_columns","title":"<code>form_excluded_columns = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude from the form. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_excluded_columns = [User.id]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_overrides","title":"<code>form_overrides = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of form column overrides.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_overrides = dict(name=wtf.FileField)\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_widget_args","title":"<code>form_widget_args = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of form widget rendering arguments. Use this to customize how widget is rendered without using custom template.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_widget_args = {\n        \"email\": {\n            \"readonly\": True,\n        },\n    }\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_include_pk","title":"<code>form_include_pk = False</code>  <code>class-attribute</code>","text":"<p>Control if form should include primary key columns or not.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_include_pk = True\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_ajax_refs","title":"<code>form_ajax_refs = {}</code>  <code>class-attribute</code>","text":"<p>Use Ajax for foreign key model loading. Should contain dictionary, where key is field name and value is a dictionary which configures Ajax lookups.</p> Example <pre><code>class UserAdmin(ModelAdmin, model=User):\n    form_ajax_refs = {\n        'address': {\n            'fields': ('street', 'zip_code'),\n            'order_by': ('id',),\n        }\n    }\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_converter","title":"<code>form_converter = ModelConverter</code>  <code>class-attribute</code>","text":"<p>Custom form converter class. Useful if you want to add custom form conversion in addition to the defaults.</p> Example <pre><code>class PhoneNumberConverter(ModelConverter):\n    pass\n\nclass UserAdmin(ModelAdmin, model=User):\n    form_converter = PhoneNumberConverter\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_rules","title":"<code>form_rules = []</code>  <code>class-attribute</code>","text":"<p>List of rendering rules for model creation and edit form. This property changes default form rendering behavior and to rearrange order of rendered fields, add some text between fields, group them, etc. If not set, will use default Flask-Admin form rendering logic.</p> Example <pre><code>class UserAdmin(ModelAdmin, model=User):\n    form_rules = [\n        \"first_name\",\n        \"last_name\",\n    ]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_create_rules","title":"<code>form_create_rules = []</code>  <code>class-attribute</code>","text":"<p>Customized rules for the create form. Cannot be specified with <code>form_rules</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_edit_rules","title":"<code>form_edit_rules = []</code>  <code>class-attribute</code>","text":"<p>Customized rules for the edit form. Cannot be specified with <code>form_rules</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_type_formatters","title":"<code>column_type_formatters = BASE_FORMATTERS</code>  <code>class-attribute</code>","text":"<p>Dictionary of value type formatters to be used in the list view.</p> <p>By default, two types are formatted:</p> <pre><code>- None will be displayed as an empty string\n- bool will be displayed as a checkmark if it is True otherwise as an X.\n</code></pre> <p>If you don't like the default behavior and don't want any type formatters applied, just override this property with an empty dictionary:</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_type_formatters = dict()\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.save_as","title":"<code>save_as = False</code>  <code>class-attribute</code>","text":"<p>Set <code>save_as</code> to enable a \"save as new\" feature on admin change forms.</p> <p>Normally, objects have three save options: <code>`Save</code>, <code>Save and continue editing</code> and <code>Save and add another</code>.</p> <p>If save_as is True, <code>Save and add another</code> will be replaced by a <code>Save as new</code> button that creates a new object (with a new ID) rather than updating the existing object.</p> <p>By default, <code>save_as</code> is set to <code>False</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.save_as_continue","title":"<code>save_as_continue = True</code>  <code>class-attribute</code>","text":"<p>When <code>save_as=True</code>, the default redirect after saving the new object is to the edit view for that object. If you set <code>save_as_continue=False</code>, the redirect will be to the list view.</p> <p>By default, <code>save_as_continue</code> is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.search_placeholder","title":"<code>search_placeholder()</code>","text":"<p>Return search placeholder text.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_labels = dict(name=\"Name\", email=\"Email\")\n    column_searchable_list = [User.name, User.email]\n\n# placeholder is: \"Name, Email\"\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_edit_query","title":"<code>form_edit_query(request)</code>","text":"<p>The SQLAlchemy select expression used for the edit form page which can be customized. By default it will select the object by primary key(s) without any additional filters.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.list_query","title":"<code>list_query(request)</code>","text":"<p>The SQLAlchemy select expression used for the list page which can be customized. By default it will select all objects without any filters.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.count_query","title":"<code>count_query(request)</code>","text":"<p>The SQLAlchemy select expression used for the count query which can be customized. By default it will select all objects without any filters.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.search_query","title":"<code>search_query(stmt, term)</code>","text":"<p>Specify the search query given the SQLAlchemy statement and term to search for. It can be used for doing more complex queries like JSON objects. For example:</p> <pre><code>return stmt.filter(MyModel.name == term)\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.sort_query","title":"<code>sort_query(stmt, request)</code>","text":"<p>A method that is called every time the fields are sorted and that can be customized. By default, sorting takes place by default fields.</p> <p>The 'sortBy' and 'sort' query parameters are available in this request context.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.details_query","title":"<code>details_query(request)</code>","text":"<p>The SQLAlchemy select expression used for the details page which can be customized. By default it will select all objects without any filters.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.on_model_change","title":"<code>on_model_change(data, model, is_created, request)</code>  <code>async</code>","text":"<p>Perform some actions before a model is created or updated. By default does nothing.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.after_model_change","title":"<code>after_model_change(data, model, is_created, request)</code>  <code>async</code>","text":"<p>Perform some actions after a model was created or updated and committed to the database. By default does nothing.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.on_model_delete","title":"<code>on_model_delete(model, request)</code>  <code>async</code>","text":"<p>Perform some actions before a model is deleted. By default does nothing.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.after_model_delete","title":"<code>after_model_delete(model, request)</code>  <code>async</code>","text":"<p>Perform some actions after a model is deleted. By default do nothing.</p>"},{"location":"cookbook/deployment_with_https/","title":"Deployment with HTTPS","text":"<p>It is common and useful to deploy your <code>SQLAdmin</code> or FastAPI/Starlette application behind a reverse proxy like Nginx and enable <code>HTTPS</code> on the reverse proxy.</p> <p>Running the app locally you would not face any issues but with HTTPS enabled behind the reverse proxy you might see errors like this in your browser developer console:</p> <pre><code>Mixed Content: The page at '&lt;URL&gt;' was loaded over HTTPS, but requested an insecure script '&lt;URL&gt;'. This request has been blocked; the content must be served over HTTPS.\n</code></pre> <p>This means the CSS and Javascript files for the Admin were not loaded properly. This is not exactly related to the <code>SQLAdmin</code> but more related to how you are deploying your project.</p> <p>For example if you are using <code>Uvicorn</code> as your ASGI server you can add the following options to solve this issue:</p> <ul> <li><code>--forwarded-allow-ips='*'</code></li> <li><code>--proxy-headers</code></li> </ul> <p>So it would be :</p> <pre><code>uvicorn &lt;module&gt;:&lt;app&gt; --forwarded-allow-ips='*' --proxy-headers\n</code></pre> <p>You can find more information and full docs for this at <code>Uvicorn</code> website here at  running behind nginx.</p>"},{"location":"cookbook/display_custom_attributes/","title":"Display custom attributes","text":"<p>If you need to display a custom attribute of your model, or a calculated attribute or property which is not direclty from the database, it is possible out of the box with <code>SQLAdmin</code>.</p> <p>Let's see an example model:</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    first_name = mapped_column(String)\n    last_name = mapped_column(String)\n\n    @property\n    def full_name(self) -&gt; str:\n        return f\"{self.first_name} {self.last_name}\"\n</code></pre> <p>And in order to for example show the <code>full_name</code> property in the admin, you can just use the <code>full_name</code> just like other string model properties.</p> <p>For example:</p> <pre><code>class UserAdmin(ModelView, model=User):\n    column_list = [User.id, \"full_name\"]\n    column_details_list = [User.id, \"full_name\"]\n</code></pre>"},{"location":"cookbook/multiple_databases/","title":"Multiple databases","text":"<p>SQLAlchemy offers some partitioning strategies to use multiple databases per session. An example from the SQLAlchemy docs is:</p> <pre><code>from sqlalchemy.orm.session import sessionmaker, Session\n\nengine1 = create_engine(\"postgresql+psycopg2://db1\")\nengine2 = create_engine(\"postgresql+psycopg2://db2\")\n\nSession = sessionmaker()\n\n# bind User operations to engine 1, Account operations to engine 2\nSession.configure(binds={User: engine1, Account: engine2})\n</code></pre> <p>With this <code>Session</code> the <code>User</code> table will be in engine1 and <code>Account</code> will be in engine2.</p> <p>And when instantiating the <code>Admin</code> object you can use the <code>sessionmaker</code> factory you have:</p> <pre><code>from sqladmin import Admin\n\n\nadmin = Admin(app=app, session_maker=Session)\nadmin.add_view(...)\n</code></pre> <p>This is different from other places where you could just use <code>engine</code> argument, and now you can use the <code>sessionmaker</code> factory.</p> <p>Tip</p> <p>In addition to being useful for partitioning, you could use the <code>sessionmaker</code> factory instead of the <code>engine</code> if you have one database for your application, SQLAdmin internally creates a <code>sessionmaker</code> for your <code>engine</code> but if you pass the <code>sessionmaker</code> you can keep any configuration you have on your sessions.</p>"},{"location":"cookbook/optimize_relationship_loading/","title":"Optimize relationship loading","text":"<p>When dealing with any kind of relationship in your models, be it One-To-Many, Many-To-One or Many-To-Many, <code>SQLAdmin</code> will load related models in your edit page.</p> <p>For example if we have the following model definition:</p> <pre><code>class Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n</code></pre> <p>When we are editing a <code>Parent</code> object in the Admin, there will be an HTML <code>select</code> option which loads all possible <code>Child</code> objects to be selected.</p> <p>This is fine for small projects, but if you more than a few hundred records in your tables, it will be very slow and inefficient. Practically for each request to the Edit page, all records of <code>Child</code> table will be loaded.</p> <p>In order to solve this you can use Form options available in configuration.</p> <p>You have a few options to improve this:</p>"},{"location":"cookbook/optimize_relationship_loading/#using-form_ajax_refs","title":"Using <code>form_ajax_refs</code>","text":"<p>Instead of loading all the <code>Child</code> objects when editing a <code>Parent</code> object, you can use <code>form_ajax_refs</code> to load <code>Child</code> objects with an AJAX call:</p> <pre><code>class ParentAdmin(ModelView, model=Parent):\n    form_ajax_refs = {\n        \"children\": {\n            \"fields\": (\"id\",),\n            \"order_by\": \"id\",\n        }\n    }\n</code></pre> <p>This will allow you to search <code>Child</code> objects using the <code>id</code> field while also ordering the results.</p>"},{"location":"cookbook/optimize_relationship_loading/#using-form_columns-or-form_excluded_columns","title":"Using <code>form_columns</code> or <code>form_excluded_columns</code>","text":"<p>Another option, which is not as useful as the previous one, is that you might not need the relationship <code>children</code> to be edited for your <code>Pranet</code> objects.</p> <p>In that case you can just exclude that or specifically include the columns which should be available in the form.</p> <pre><code>class ParentAdmin(ModelView, model=Parent):\n    form_excluded_columns = [Parent.children]\n</code></pre>"},{"location":"cookbook/optimize_relationship_loading/#using-form_edit_query-to-customize-the-edit-form-data","title":"Using <code>form_edit_query</code> to customize the edit form data","text":"<p>If you would like to fully customize the query to populate the edit object form, you may override the <code>form_edit_query</code> function with your own SQLAlchemy query. In the following example, overriding the default query will allow you to filter relationships to show only related children of the parent.</p> <pre><code>class ParentAdmin(ModelView, model=Parent):\n    def form_edit_query(self, request: Request) -&gt; Select:\n        parent_id = request.path_params[\"pk\"]\n        return (\n            self._stmt_by_identifier(parent_id)\n            .join(Child)\n            .options(contains_eager(Parent.children))\n            .filter(Child.parent_id == parent_id)\n        )\n</code></pre>"},{"location":"cookbook/using_request_object/","title":"Using a request object","text":"<p>If you want to access the <code>request</code> object for the admin, doing actions like create/update/delete you can override the specific <code>ModelView</code> methods.</p> <p>These methods include:</p> <ul> <li><code>insert_model(request, data)</code></li> <li><code>update_model(request, pk, data)</code></li> <li><code>delete_model(request, pk)</code></li> </ul> <p>A common use case is to access the <code>request.user</code> and store that in create/update model:</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n\nclass Post(Base):\n    __tablename__ = \"post\"\n\n    id = mapped_column(Integer, primary_key=True)\n    text = mapped_column(String)\n    author = relationship(\"User\")\n    author_id = mapped_column(Integer, ForeignKey(\"user.id\"), index=True)\n</code></pre> <p>And whenever a new <code>Post</code> is created we want to store the current admin user creating it. This can be done by overriding the <code>insert_model</code> method:</p> <pre><code>class PostAdmin(ModelView, model=Post):\n    async def insert_model(self, request, data):\n        data[\"author_id\"] = request.user.id\n        return await super().insert_model(request, data)\n</code></pre> <p>Here we've set the current <code>request.user.id</code> into the dictionary of data which will create the <code>Post</code>.</p> <p>The same thing can be done to control <code>update</code> and <code>delete</code> actions with the methods mentioned above.</p>"},{"location":"cookbook/using_wysiwyg/","title":"Using rich text editor","text":"<p>You can customize the templates and add custom javascript code to enable CKEditor to your fields. In order to use <code>CKEditor</code> you need to inject some JS code into the SQLAdmin and that works by customizing the templates.</p> <p>Let's say you have the following model:</p> <pre><code>class Post(Base):\n    id = Column(Integer, primary_key=True)\n    content = Column(Text, nullable=False)\n</code></pre> <ul> <li>First create a <code>templates/sqladmin</code> directory in your project.</li> <li> <p>Then add a file <code>custom_edit.html</code> there with the following content: custom_edit.html<pre><code>{% extends \"sqladmin/edit.html\" %}\n{% block tail %}\n&lt;script src=\"https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    ClassicEditor\n        .create(document.querySelector('#content'))\n        .catch(error =&gt; {\n            console.error(error);\n        });\n&lt;/script&gt;\n{% endblock %}\n</code></pre></p> </li> <li> <p>Use the <code>custom_edit.html</code> template in your admin:</p> </li> </ul> <pre><code>class PostAdmin(ModelView, model=Post):\n    edit_template = \"custom_edit.html\"\n</code></pre> <p>Now whenever editing a Post object in admin, the CKEditor will be applied to the <code>content</code> field of the model. You can do the same thing with <code>create_template</code> field.</p>"},{"location":"cookbook/working_with_passwords/","title":"Working with Passwords","text":"<p>It's a comment use-case that you have a model with a <code>Password</code> field which needs a custom behaviour.</p> <p>Let's say you have the following <code>User</code> model:</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    hashed_password: Mapped[str] = mapped_column(String)\n</code></pre> <p>In this specific case we want the following features to be available in the Admin console:</p> <ul> <li>We only want <code>hashed_password</code> when creating a new <code>User</code>, and we want to hide it when editing a <code>User</code>.</li> <li>When a User is created, the password should be hashed and stored in the <code>hashed_password</code> column.</li> </ul> <p>So we define the following <code>UserAdmin</code> class for it:</p> <pre><code>class UserAdmin(ModelView, model=User):\n    column_labels = {\"hashed_password\": \"password\"}\n    form_create_rules = [\"name\", \"hashed_password\"]\n    form_edit_rules = [\"name\"]\n\n    async def on_model_change(self, data, model, is_created, request) -&gt; None:\n        if is_created:\n            # Hash the password before saving into DB !\n            data[\"hashed_password\"] = data[\"hashed_password\"] +  \"_hashed\"\n</code></pre> <p>So let's see what is happening.</p> <p>The <code>column_labels</code> is just saying to rename <code>hashed_password</code> to <code>password</code> when displaying or creating a form for the <code>User</code>.</p> <p>Next we have defined two extra attributes called <code>form_create_rules</code> and <code>form_edit_rules</code> which controls how the create and edit forms are created.</p> <p>In the <code>form_create_rules</code> declaration we specify we want <code>name</code> and <code>hashed_password</code> when creating a <code>User</code>.</p> <p>But in <code>form_edit_rules</code> we specifically excluded <code>hashed_password</code> so we only want to edit <code>name</code> of the <code>User</code>.</p> <p>And finally the last step is to hash the password before saving into the database. There could be a few options to do this, but in this case we are overriding <code>on_model_change</code> and only hashing the password when we are creating a <code>User</code>.</p>"}]}